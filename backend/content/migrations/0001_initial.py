# Generated by Django 5.2.1 on 2025-06-27 19:35

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

# Import the required functions from the content app
from content.models import (
    lesson_resource_upload_path,
    validate_file_size,
    module_video_upload_path,
    module_pdf_upload_path
)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the lesson', max_length=200, verbose_name='title')),
                ('slug', models.SlugField(blank=True, help_text='A short label containing only letters, numbers, underscores or hyphens for URLs', max_length=250, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, help_text='Brief description of the lesson', null=True, verbose_name='description')),
                ('content', models.TextField(blank=True, help_text='Main content of the lesson (HTML/Text)', null=True, verbose_name='content')),
                ('lesson_type', models.CharField(choices=[('video', 'Video'), ('article', 'Article'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('discussion', 'Discussion')], default='article', help_text='Type of the lesson', max_length=20, verbose_name='lesson type')),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', help_text='Difficulty level of the lesson', max_length=20, verbose_name='difficulty level')),
                ('video_url', models.URLField(blank=True, help_text='URL to the video content (if any)', null=True, verbose_name='video URL')),
                ('duration_minutes', models.PositiveIntegerField(default=0, help_text='Estimated time to complete in minutes', validators=[django.core.validators.MinValueValidator(0, message='Duration cannot be negative'), django.core.validators.MaxValueValidator(1440, message='Duration cannot be more than 24 hours')], verbose_name='duration in minutes')),
                ('order', models.PositiveIntegerField(default=0, help_text='The order in which the lesson appears in the module', verbose_name='order')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this lesson should be treated as active', verbose_name='is active')),
                ('is_free', models.BooleanField(default=False, help_text='Designates whether this lesson is available for free', verbose_name='is free')),
                ('requires_completion', models.BooleanField(default=True, help_text='If True, user must complete this lesson to proceed to the next one', verbose_name='requires completion')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='published at')),
            ],
            options={
                'verbose_name': 'lesson',
                'verbose_name_plural': 'lessons',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='LessonResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Name of the resource', max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, help_text='Brief description of the resource', null=True, verbose_name='description')),
                ('resource_type', models.CharField(choices=[('document', 'Document'), ('presentation', 'Presentation'), ('spreadsheet', 'Spreadsheet'), ('image', 'Image'), ('audio', 'Audio'), ('video', 'Video'), ('link', 'External Link'), ('other', 'Other')], default='document', help_text='Type of the resource', max_length=20, verbose_name='resource type')),
                ('file', models.FileField(blank=True, help_text='Upload a file for this resource', null=True, upload_to=lesson_resource_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'jpg', 'jpeg', 'png', 'gif', 'mp3', 'mp4', 'mov', 'webm', 'zip', 'rar', 'txt', 'md', 'csv', 'json', 'yaml', 'html', 'css', 'js', 'py', 'ipynb']), validate_file_size], verbose_name='file')),
                ('url', models.URLField(blank=True, help_text='External URL for the resource (if not uploading a file)', null=True, verbose_name='URL')),
                ('is_public', models.BooleanField(default=True, help_text='Whether this resource is available to all users', verbose_name='is public')),
                ('order', models.PositiveIntegerField(default=0, help_text='The order in which the resource appears in the lesson', verbose_name='order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata about the resource', verbose_name='metadata')),
                ('lesson', models.ForeignKey(help_text='The lesson this resource belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='lesson_resources', to='content.lesson', verbose_name='lesson')),
            ],
            options={
                'verbose_name': 'lesson resource',
                'verbose_name_plural': 'lesson resources',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='resources',
            field=models.ManyToManyField(blank=True, help_text='Additional resources for this lesson', related_name='lessons', to='content.lessonresource', verbose_name='resources'),
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the module', max_length=2000, verbose_name='module name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the module', null=True, verbose_name='description')),
                ('video', models.FileField(blank=True, help_text='Upload a video file (max 100MB, MP4/WebM/MOV)', null=True, upload_to=module_video_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm', 'mov']), validate_file_size], verbose_name='video file')),
                ('video_duration', models.PositiveIntegerField(default=0, help_text='Duration of the video in seconds', verbose_name='video duration in seconds')),
                ('pdf', models.FileField(blank=True, help_text='Upload a PDF file (max 100MB)', null=True, upload_to=module_pdf_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf']), validate_file_size], verbose_name='PDF file')),
                ('note', models.TextField(blank=True, help_text='Private notes for instructors', null=True, verbose_name='instructor notes')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', help_text='Publication status of the module', max_length=20, verbose_name='status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this module should be treated as active', verbose_name='is active')),
                ('order', models.PositiveIntegerField(default=0, help_text='The order in which the module appears in the course', verbose_name='order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='published at')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course', verbose_name='course')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Modules that must be completed before this one', related_name='is_prerequisite_for', to='content.module')),
            ],
            options={
                'verbose_name': 'module',
                'verbose_name_plural': 'modules',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='content.module', verbose_name='module'),
        ),
        migrations.CreateModel(
            name='ModuleProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='not_started', help_text='Current status of the module progress', max_length=20, verbose_name='status')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When the user first accessed this module', verbose_name='started at')),
                ('last_accessed', models.DateTimeField(auto_now=True, help_text='When the user last accessed this module', verbose_name='last accessed')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the user completed this module', null=True, verbose_name='completed at')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether the user has completed this module', verbose_name='is completed')),
                ('video_watched', models.BooleanField(default=False, help_text='Whether the user has watched the module video', verbose_name='video watched')),
                ('video_progress', models.FloatField(default=0, help_text='Percentage of video watched (0-100)', validators=[django.core.validators.MinValueValidator(0, 'Progress cannot be negative'), django.core.validators.MaxValueValidator(100, 'Progress cannot exceed 100%')], verbose_name='video progress')),
                ('video_last_position', models.FloatField(default=0, help_text='Last position in seconds where the user left the video', verbose_name='video last position')),
                ('pdf_viewed', models.BooleanField(default=False, help_text='Whether the user has viewed the module PDF', verbose_name='PDF viewed')),
                ('pdf_last_page', models.PositiveIntegerField(default=1, help_text='Last page number the user viewed in the PDF', verbose_name='PDF last page')),
                ('notes_read', models.BooleanField(default=False, help_text='Whether the user has read the module notes', verbose_name='notes read')),
                ('quiz_completed', models.BooleanField(default=False, help_text='Whether the user has completed the module quiz', verbose_name='quiz completed')),
                ('quiz_score', models.FloatField(blank=True, help_text='Score achieved on the module quiz (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0, 'Score cannot be negative'), django.core.validators.MaxValueValidator(100, 'Score cannot exceed 100%')], verbose_name='quiz score')),
                ('completion_requirements', models.JSONField(default=dict, help_text='Structured data about completion requirements', verbose_name='completion requirements')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata about the module progress', verbose_name='metadata')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='content.module', verbose_name='module')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='module_progress', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'module progress',
                'verbose_name_plural': 'module progress',
                'ordering': ['module__order'],
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True, help_text='When the user enrolled in the course', verbose_name='enrolled at')),
                ('last_accessed', models.DateTimeField(auto_now=True, help_text='When the user last accessed the course', verbose_name='last accessed')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the user first accessed the course content', null=True, verbose_name='started at')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the user completed the course', null=True, verbose_name='completed at')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='not_started', help_text='Current status of the user in this course', max_length=20, verbose_name='status')),
                ('overall_progress', models.FloatField(default=0, help_text='Overall progress percentage (0-100)', validators=[django.core.validators.MinValueValidator(0, message='Progress cannot be negative'), django.core.validators.MaxValueValidator(100, message='Progress cannot exceed 100%')], verbose_name='overall progress')),
                ('time_spent_minutes', models.PositiveIntegerField(default=0, help_text='Total time spent on the course in minutes', verbose_name='time spent (minutes)')),
                ('notes', models.TextField(blank=True, help_text='User notes for this course', null=True, verbose_name='notes')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='courses.course', verbose_name='course')),
                ('last_lesson_completed', models.ForeignKey(blank=True, help_text='The last lesson the user completed', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='content.lesson', verbose_name='last lesson completed')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_progress', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user progress',
                'verbose_name_plural': 'user progress',
                'ordering': ['-last_accessed'],
            },
        ),
        migrations.AddIndex(
            model_name='lessonresource',
            index=models.Index(fields=['lesson', 'order'], name='content_les_lesson__aeba6e_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonresource',
            index=models.Index(fields=['resource_type'], name='content_les_resourc_04fea1_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonresource',
            index=models.Index(fields=['is_public'], name='content_les_is_publ_c7b81a_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['course', 'order'], name='content_mod_course__07037a_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['status'], name='content_mod_status_b5b6b1_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['is_active'], name='content_mod_is_acti_dacc5c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='module',
            unique_together={('course', 'order')},
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['module', 'order'], name='content_les_module__c210ff_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['is_active'], name='content_les_is_acti_f5fdf5_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['lesson_type'], name='content_les_lesson__2f0b53_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['difficulty'], name='content_les_difficu_5e335b_idx'),
        ),
        migrations.AddConstraint(
            model_name='lesson',
            constraint=models.UniqueConstraint(fields=('module', 'slug'), name='unique_lesson_slug_per_module'),
        ),
        migrations.AlterUniqueTogether(
            name='lesson',
            unique_together={('module', 'order')},
        ),
        migrations.AddIndex(
            model_name='moduleprogress',
            index=models.Index(fields=['user', 'module'], name='content_mod_user_id_6b527c_idx'),
        ),
        migrations.AddIndex(
            model_name='moduleprogress',
            index=models.Index(fields=['status'], name='content_mod_status_082d93_idx'),
        ),
        migrations.AddIndex(
            model_name='moduleprogress',
            index=models.Index(fields=['is_completed'], name='content_mod_is_comp_c9920f_idx'),
        ),
        migrations.AddIndex(
            model_name='moduleprogress',
            index=models.Index(fields=['started_at'], name='content_mod_started_f82b32_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='moduleprogress',
            unique_together={('user', 'module')},
        ),
        migrations.AddIndex(
            model_name='userprogress',
            index=models.Index(fields=['user', 'course'], name='content_use_user_id_3f5fa0_idx'),
        ),
        migrations.AddIndex(
            model_name='userprogress',
            index=models.Index(fields=['status'], name='content_use_status_c43c72_idx'),
        ),
        migrations.AddIndex(
            model_name='userprogress',
            index=models.Index(fields=['overall_progress'], name='content_use_overall_4846cc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userprogress',
            unique_together={('user', 'course')},
        ),
    ]
